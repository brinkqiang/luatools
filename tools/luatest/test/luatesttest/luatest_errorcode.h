/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
**                   Auther: brinkqiang (brink.qiang@gmail.com)    **
********************************************************************/

/*       Version Number: 1_0          */

#ifndef _ERRORCODE_H_INCLUDE_VERSION_1_0
#define _ERRORCODE_H_INCLUDE_VERSION_1_0

#include "dmformat.h"

#ifndef NS_BEGIN
#define NS_BEGIN
#endif

#ifndef NS_NAMESPACE
#define NS_NAMESPACE
#endif

#ifndef NS_END
#define NS_END
#endif

NS_BEGIN

enum EErrorID
{
    FORMAT_ERR_OK                             = 0     , /// OK /// 操作成功错误码
    FORMAT_ERR_NG                             = 1     , /// NG /// 常规失败错误码
    FORMAT_ERR_NET_CONNECT                             = 1000     , /// host:{0} port:{1} connect failed.  /// 主机:{0} 端口:{1} 连接失败
};

template<EErrorID ID> inline const char * GetError();

inline const char * GetError(){return "ERR_UNKNOWN";}

template<> inline const char * GetError<FORMAT_ERR_OK>(){return "OK";}
template<> inline const char * GetError<FORMAT_ERR_NG>(){return "NG";}
template<> inline const char * GetError<FORMAT_ERR_NET_CONNECT>(){return "host:{0} port:{1} connect failed. ";}

inline const char* GetError(int nError)
{
    switch(nError)
    {
    case FORMAT_ERR_OK: return GetError<FORMAT_ERR_OK>();
    case FORMAT_ERR_NG: return GetError<FORMAT_ERR_NG>();
    case FORMAT_ERR_NET_CONNECT: return GetError<FORMAT_ERR_NET_CONNECT>();
    default: break;
    }
    return GetError();
}

template<class... Args>
inline std::string FormatError(int nError, Args && ... args)
{
    return fmt::format(GetError(nError), std::forward<Args>(args)...);
}

NS_END
#endif
